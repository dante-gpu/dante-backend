# GORELEASER: Auto-generated by goreleaser. DO NOT EDIT.
# Default values for Grafana. 

# For more information on configuration options, refer to the Grafana documentation:
# https://grafana.com/docs/grafana/latest/administration/configuration/

#################################### Server ####################################
[server]
# Protocol (http or https) for the Grafana server to use
protocol = http

# The http port to use
http_port = 3000

# The public facing domain name used to access grafana from a browser
# domain = localhost

# Redirect to correct domain if host header does not match domain
# enforce_domain = false

# The full public facing url
root_url = %(protocol)s://%(domain)s:%(http_port)s/

# Serve Grafana from a subpath (e.g., /grafana)
# serve_from_sub_path = false

# Log web framework startup header (Grafana version, edition, paths, etc.)
# router_logging = false

# Enable gzip compression for HTTP responses
# enable_gzip = false

# https certs & key file
# cert_file =
# cert_key =

# Unix socket path. If set, http_addr and http_port are ignored.
# unix_socket =

# For situations when you want to proxy Grafana from a subpath but have the subpath removed
# Example: http://localhost/grafana -> http://grafana-server, where Grafana is served from /
# path_prefix_for_reverse_proxy_header = "X-Forwarded-Prefix"

#################################### Paths #####################################
[paths]
# Path to where Grafana will store its sqlite3 database (if used), session files, plugins, and other data.
# This path is usually specified via the command line in the init.d script or the systemd service file.
data = /var/lib/grafana

# Path to where Grafana will store logs.
# This path is usually specified via the command line in the init.d script or the systemd service file.
logs = /var/log/grafana

# Directory where Grafana will automatically scan and look for plugins
plugins = /var/lib/grafana/plugins

# Path to where Grafana will store compiled dashboards (provisioned)
# provisioned_dashboard_path = /var/lib/grafana/dashboards

#################################### Security ##################################
[security]
# Default admin user, created on startup
admin_user = admin

# Default admin password, can be changed before first start of grafana, or in profile settings
admin_password = DanteGPUAdmin!2025May10

# Set to true to disable the creation of the default admin user on startup.
# disable_initial_admin_creation = false

# Cookie name for Grafana session
# cookie_name = grafana_session

# The lifetime (duration) of a cookie. Can be set like 1h, 1d, 1w, 1M, 1y.
# cookie_secure = false
# cookie_samesite = lax

# Login cookie name
# login_cookie_name = grafana_session

# Set to true if you host Grafana behind HTTPS. Default is false.
# cookie_secure = false

# Set cookie SameSite attribute. Defaults to `lax`. Can be set to `lax`, `strict`, `none` and `disabled`.
# cookie_samesite = lax

# XSRF cookie settings
# xsrf_cookie_name = grafana_xsrf

# Allow embedding Grafana in other sites using <iframe_>, <frame_>, <object_>, <embed_> tags.
# Defaults to false for security reasons.
allow_embedding = true

#################################### Users #####################################
[users]
# Allow new users to sign up / Kiosk mode
allow_sign_up = false

# Allow users to self-organize in orgs. (deprecated)
# allow_org_create = false

# Set to true to automatically assign new users to the default organization (id 1)
# auto_assign_org = true

# Default organization role for new users
# auto_assign_org_role = Viewer

# Control if existing users can be invited to organizations by organization admins.
# viewers_can_edit = false

#################################### Auth ######################################
[auth]
# Login form cooldown time after multiple failed login attempts. Defaults to 60 seconds.
# login_maximum_inactive_lifetime_days = 7
# login_maximum_lifetime_days = 30

# URL to redirect the user to after sign out
# signout_redirect_url =

# Set to true to disable (hide) the login form, useful if you use OAuth
# disable_login_form = false

# Set to true to disable the signout link in the side menu.
# disable_signout_menu = false

# Set to true to attempt login with OAuth automatically, skipping the login screen.
# This option is ignored if multiple OAuth providers are configured.
# oauth_auto_login = false

# Set to a URL to redirect the user to after a successful OAuth login if the user has no Grafana organization memberships.
# oauth_skip_org_role_update_sync = false

[auth.anonymous]
# Enable anonymous access
enabled = false

# Organization name for anonymous users
# org_name = Main Org.

# Role for anonymous users
# org_role = Viewer

# Hide the version from the footer (server-side check)
# hide_version = false

#################################### Analytics #################################
[analytics]
# Server reporting, sends anonymous usage statistics to stats.grafana.org
reporting_enabled = false

# Google Analytics universal tracking ID, only used if reporting_enabled is set to true
# google_analytics_ua_id =

# Google Tag Manager ID, only used if reporting_enabled is set to true
# google_tag_manager_id =

#################################### Dashboards ################################
[dashboards]
# Default dashboard version history TTL. Can be set like 1h, 1d, 1w, 1M, 1y.
versions_to_keep = 20

# Minimum dashboard refresh interval. Prevents users from setting refresh intervals lower than this value.
# min_refresh_interval = 5s

#################################### Alerting ##################################
[alerting]
# Enables the legacy Grafana alerting system (deprecated in Grafana 8, removed in Grafana 9)
# enabled = true

# Enables the new unified alerting system (Grafana 8+)
# This should be true by default in recent Grafana versions.
# For Grafana 9+, legacy alerting is removed, so this section might be less relevant or specific to unified alerting behavior.
# execute_alerts = true

# Directory where Grafana will store alert rules when `file` storage is used for unified alerting.
# alert_rule_storage_path = /var/lib/grafana/alerting

#################################### Logging ###################################
[log]
# Optional settings to control how Grafana logs. By default, Grafana logs to console and file if the `logs` path is set.
# Console and file logging can be configured independently.

# Either "console", "file", "syslog". Default is console
# Use space to separate multiple modes, e.g. "console file"
mode = console file

# Log level, valid options are "trace", "debug", "info", "warn", "error", "critical", default is "info"
level = info

# Optional settings to set different levels for specific loggers. Ex: gf.db=debug
# filters =

#################################### Explore ###################################
[explore]
# Globally enable/disable Explore section
# enabled = true

#################################### Provisioning ##############################
[provisioning]
# Directory where Grafana will automatically scan and look for provisioning files
# This is a relative path to the Grafana install path, or an absolute path.
# Will be created if it does not exist.
# We will manage datasources and dashboards through this.
# Default is <grafana_install_path>/conf/provisioning
# For Docker, this often maps to /etc/grafana/provisioning
# Set to a specific path to ensure it's used. This path should be volume-mounted in Docker.
# Path to the directory where Grafana will load provisioning configurations
# from when it starts up. Ensure this path is accessible by Grafana process.
# This path is used by Grafana to look for datasource and dashboard provisioning YAML files.
# For Docker setups, this is typically /etc/grafana/provisioning, which is then volume-mounted.
# For a non-Docker setup, ensure the grafana user can read from this path.

# Path to the directory where Grafana will load provisioning configurations
# from when it starts up. Grafana will try to create it if it does not exist.
# This path will be scanned for YAML files that define datasources and dashboards.
# In Docker, this is often `/etc/grafana/provisioning`
# We will set this explicitly. The container will need a volume mount to this location.

# Directory that contains provisioning files that Grafana will apply on startup
# This path can be absolute or relative to the Grafana install directory.
# For Docker, this is typically `/etc/grafana/provisioning`
# Setting a default path for our setup.

# Path to the directory where Grafana will load provisioning files
# This path should be accessible by the Grafana process.
# In Docker, this is commonly /etc/grafana/provisioning and volume mounted.
# This is the main path for provisioning configs.
# datasources_path = conf/provisioning/datasources
# dashboards_path = conf/provisioning/dashboards
# notifiers_path = conf/provisioning/notifiers
# plugins_path = conf/provisioning/plugins
# Path to the directory where Grafana will load provisioning files from.
# This is a main path setting, and then specific types (datasources, dashboards) have sub-paths.
# Often, you just specify the parent directory, and Grafana looks for subdirectories named
# `datasources`, `dashboards`, `notifiers`.
# However, it can also be configured with specific paths for each type.
# Let's use the default structure: Grafana will look for `datasources` and `dashboards` subdirectories
# within this path if specific paths for those are not set.
# If the paths are relative, they are relative to the grafana installation path.
# Using an absolute path is safer if you're unsure about the install path.
# For Docker, `/etc/grafana/provisioning` is common. Let's assume this for now.

# Path where Grafana will look for provisioning files. This directory should contain
# subdirectories like `datasources` and `dashboards`.
# In a Docker setup, you would volume mount your local provisioning configurations here.
# path = /etc/grafana/provisioning/

# The above `path` is a more general setting. You can also specify paths for each type.
# For our specific setup, we will configure datasource and dashboard provisioning via YAML files
# placed in subdirectories under a main provisioning path (e.g., /etc/grafana/provisioning/datasources
# and /etc/grafana/provisioning/dashboards).
# The `[provisioning]` section itself doesn't need a `path` key if we are relying on the default behavior
# where Grafana scans its `conf/provisioning` directory or if paths are set via environment variables
# like GF_PROVISIONING_PATH.

# For clarity and control, we will set explicit paths relative to a base provisioning directory
# which will be defined by GF_PROVISIONING_PATHS environment variable in a Docker setup, or
# defaults to `conf/provisioning` in the Grafana installation directory.
# Let's assume our provisioning files will be in standard subdirectories.

# By default, Grafana looks in `conf/provisioning/datasources` and `conf/provisioning/dashboards`.
# If we set the env var `GF_PATHS_PROVISIONING=/etc/grafana/provisioning` (common in Docker),
# then Grafana will look in `/etc/grafana/provisioning/datasources` and `/etc/grafana/provisioning/dashboards`.
# We don't need to specify individual paths here if we follow that convention.

# The following are default paths relative to `GF_PATHS_CONFIG` (conf directory)
# unless `GF_PATHS_PROVISIONING` is set, which overrides the base path for these.
# datasources_path = conf/provisioning/datasources
# dashboards_path = conf/provisioning/dashboards
# For Docker, it's common to set `GF_PATHS_PROVISIONING=/etc/grafana/provisioning`.
# Then Grafana will automatically look for `datasources` and `dashboards` folders there.
# We will rely on this convention for our Docker setup and ensure the `docker-compose.yml` mounts volumes to these locations. 